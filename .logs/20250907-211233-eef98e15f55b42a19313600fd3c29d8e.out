âž¤ YN0000: Â· Yarn 4.9.4
âž¤ YN0000: â”Œ Resolution step
âž¤ YN0085: â”‚ - @aws-crypto/crc32@npm:5.2.0, @aws-crypto/crc32c@npm:5.2.0, @aws-crypto/sha1-browser@npm:5.2.0, @aws-crypto/sha256-browser@npm:5.2.0, and 94 more.
âž¤ YN0000: â”” Completed
âž¤ YN0000: â”Œ Post-resolution validation
âž¤ YN0060: â”‚ @typescript-eslint/parser is listed by your project with version 7.0.0 (p6cb6c0), which doesn't satisfy what @typescript-eslint/eslint-plugin requests (^6.0.0-alpha).
âž¤ YN0060: â”‚ eslint is listed by your project with version 9.24.0 (pe6e000), which doesn't satisfy what @typescript-eslint/eslint-plugin and other dependencies request (^8.57.0).
âž¤ YN0002: â”‚ app@workspace:. doesn't provide prettier (pd88b5f), requested by eslint-plugin-prettier.
âž¤ YN0086: â”‚ Some peer dependencies are incorrectly met by your project; run yarn explain peer-requirements <hash> for details, where <hash> is the six-letter p-prefixed code.
âž¤ YN0086: â”‚ Some peer dependencies are incorrectly met by dependencies; run yarn explain peer-requirements for details.
âž¤ YN0000: â”” Completed
âž¤ YN0000: â”Œ Fetch step
âž¤ YN0000: â”” Completed in 0s 923ms
âž¤ YN0000: â”Œ Link step
âž¤ YN0000: â”” Completed in 1s 3ms
âž¤ YN0000: Â· Done with warnings in 2s 228ms
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.7.0) to ./node_modules/.prisma/client in 100ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Easily identify and fix slow SQL queries in your app. Optimize helps you enhance your visibility: https://pris.ly/--optimize

Starting server...
  â–² Next.js 14.2.28
  - Local:        http://localhost:3000
  - Environments: .env
  - Experiments (use with caution):
    Â· outputFileTracingRoot

 âœ“ Starting...
 âœ“ Ready in 1736ms
 â—‹ Compiling / ...
 âœ“ Compiled / in 2.3s (1394 modules)
 HEAD / 200 in 2648ms
 âœ“ Compiled in 526ms (700 modules)
 GET / 200 in 64ms
 GET / 200 in 41ms
 GET / 200 in 43ms
 âœ“ Compiled /api/dashboard/stats in 232ms (725 modules)
 GET /api/dashboard/stats 200 in 442ms
 GET /api/dashboard/stats 200 in 87ms
[?25h
